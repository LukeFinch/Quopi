"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockCLI = mockCLI;
exports.mockAPI = mockAPI;
exports.mockPreviewAPI = mockPreviewAPI;
exports.CLI_CLIENT_CACHED = exports.API_CLIENT_CACHED = exports.CLI_CLIENT = exports.API_CLIENT = exports.DEFAULT_CLIENT = void 0;

var _child_process = _interopRequireDefault(require("child_process"));

var _nock = _interopRequireDefault(require("nock"));

var _readableStream = require("readable-stream");

var _Client = _interopRequireDefault(require("./Client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* istanbul ignore file */
jest.mock("child_process");

function buildTextStream(text) {
  const stream = new _readableStream.Readable();

  stream._read = () => {};

  if (text) {
    stream.push(text);
    stream.push(null);
  }

  return stream;
}

const DEFAULT_CLIENT = new _Client.default();
exports.DEFAULT_CLIENT = DEFAULT_CLIENT;
const API_CLIENT = new _Client.default({
  accessToken: "accessToken",
  apiUrl: "http://apiUrl",
  previewsUrl: "http://previewsUrl",
  transportMode: "api"
});
exports.API_CLIENT = API_CLIENT;
const CLI_CLIENT = new _Client.default({
  accessToken: "accessToken",
  apiUrl: "http://apiUrl",
  cliPath: ".",
  previewsUrl: "http://previewsUrl",
  transportMode: "cli"
});
exports.CLI_CLIENT = CLI_CLIENT;
const API_CLIENT_CACHED = new _Client.default({
  accessToken: "accessToken",
  apiUrl: "http://apiUrl",
  maxCacheSize: 10,
  previewsUrl: "http://previewsUrl",
  transportMode: "api"
});
exports.API_CLIENT_CACHED = API_CLIENT_CACHED;
const CLI_CLIENT_CACHED = new _Client.default({
  accessToken: "accessToken",
  apiUrl: "http://apiUrl",
  cliPath: ".",
  maxCacheSize: 10,
  previewsUrl: "http://previewsUrl",
  transportMode: "cli"
});
exports.CLI_CLIENT_CACHED = CLI_CLIENT_CACHED;

function mockCLI(args, response, error) {
  _child_process.default.spawn.mockClear();

  _child_process.default.spawn.mockReturnValueOnce({
    stdout: buildTextStream(JSON.stringify(response)),
    stderr: buildTextStream(JSON.stringify(error)),
    on: (name, cb) => {
      const callArgs = _child_process.default.spawn.mock.calls[0][1].slice(-args.length);

      expect(callArgs).toEqual(args);
      setTimeout(() => {
        name === "error" && error && cb(1);
        name === "close" && !error && cb(0);
      });
    }
  });
}

function mockAPI(url, response, code = 200, method = "get") {
  (0, _nock.default)("http://apiUrl")[method](url).reply(code, response);
}

function mockPreviewAPI(url, response, code = 200, method = "get") {
  (0, _nock.default)("http://previewsurl")[method](url).reply(code, response);
}