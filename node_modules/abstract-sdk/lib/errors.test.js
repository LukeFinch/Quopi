"use strict";

var _testing = require("./testing");

var _Client = _interopRequireDefault(require("./Client"));

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let globalBlob;

function getResponse(response) {
  return _objectSpread({}, response, {
    clone: () => ({
      json: () => "json"
    })
  });
}

describe("errors", () => {
  beforeAll(() => {
    globalBlob = global.Blob;
    global.Blob = undefined;
  });
  afterAll(() => {
    global.Blob = globalBlob;
  });
  test("CLIPathError", async () => {
    const client = new _Client.default({
      cliPath: "./nonexistent",
      transportMode: "cli"
    });

    try {
      await client.commits.list({
        projectId: "project-id",
        branchId: "branch-id",
        fileId: "file-id",
        sha: "sha"
      });
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.CLIPathError);
    }
  });
  test("FileAPIError", async () => {
    try {
      await _testing.CLI_CLIENT.previews.url({
        projectId: "project-id",
        branchId: "branch-id",
        fileId: "file-id",
        sha: "sha",
        layerId: "layer-id"
      });
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.FileAPIError);
    }
  });
  test("EndpointUndefinedError", async () => {
    try {
      await _testing.CLI_CLIENT.projects.list({
        organizationId: "org-id"
      });
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.EndpointUndefinedError);
    }
  });
  test("APITokenError", async () => {
    try {
      const client = new _Client.default({
        accessToken: undefined,
        transportMode: "api"
      });
      await client.projects.list({
        organizationId: "org-id"
      });
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.APITokenError);
    }
  });
  test("UnauthorizedError", async () => {
    try {
      await (0, _errors.throwAPIError)(getResponse({
        status: 401
      }), "url", "body");
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.UnauthorizedError);
    }
  });
  test("ForbiddenError", async () => {
    try {
      await (0, _errors.throwAPIError)(getResponse({
        status: 403
      }), "url", "body");
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.ForbiddenError);
    }
  });
  test("NotFoundError", async () => {
    try {
      await (0, _errors.throwAPIError)(getResponse({
        status: 404
      }), "url", "body");
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.NotFoundError);
    }
  });
  test("RateLimitError", async () => {
    try {
      await (0, _errors.throwAPIError)(getResponse({
        status: 429,
        headers: {
          get() {}

        }
      }), "url", "body");
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.RateLimitError);
    }
  });
  test("ServiceUnavailableError", async () => {
    try {
      await (0, _errors.throwAPIError)(getResponse({
        status: 500
      }), "url", "body");
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.InternalServerError);
    }
  });
  test("ServiceUnavailableError", async () => {
    try {
      await (0, _errors.throwAPIError)(getResponse({
        status: 503
      }), "url", "body");
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.ServiceUnavailableError);
    }
  });
  test("Default", async () => {
    try {
      await (0, _errors.throwAPIError)(getResponse({
        status: 1337
      }), "url", "body");
    } catch (error) {
      expect(error).toBeInstanceOf(Error);
    }
  });
  test("UnauthorizedError", async () => {
    try {
      await (0, _errors.throwCLIError)({
        code: "unauthorized"
      }, "cliPath", {});
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.UnauthorizedError);
    }
  });
  test("ForbiddenError", async () => {
    try {
      await (0, _errors.throwCLIError)({
        code: "forbidden"
      }, "cliPath", {});
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.ForbiddenError);
    }
  });
  test("NotFoundError", async () => {
    try {
      await (0, _errors.throwCLIError)({
        code: "not_found"
      }, "cliPath", {});
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.NotFoundError);
    }
  });
  test("RateLimitError", async () => {
    try {
      await (0, _errors.throwCLIError)({
        code: "too_many_requests"
      }, "cliPath", {});
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.RateLimitError);
    }
  });
  test("ServiceUnavailableError", async () => {
    try {
      await (0, _errors.throwCLIError)({
        code: "service_unavailable"
      }, "cliPath", {});
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.ServiceUnavailableError);
    }
  });
  test("Default", async () => {
    try {
      await (0, _errors.throwCLIError)({
        code: "1337"
      }, "cliPath", {});
    } catch (error) {
      expect(error).toBeInstanceOf(Error);
    }
  });
});