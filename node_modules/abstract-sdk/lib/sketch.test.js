"use strict";

var sketch = _interopRequireWildcard(require("./sketch"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

let globalProcess;
let globalNSString;
let globalPROSketchBootstrap;
describe("isSketchPlugin", () => {
  beforeAll(() => {
    globalProcess = global.process;
    globalNSString = global.NSString;
  });
  afterAll(() => {
    global.process = globalProcess;
    global.NSString = globalNSString;
  });
  test("detects Sketch", () => {
    global.process = {
      type: "sketch"
    };
    expect(sketch.isSketchPlugin()).toBe(true);
    global.process = {
      type: "foo"
    };
    global.NSString = {};
    expect(sketch.isSketchPlugin()).toBe(true);
  });
});
describe("isAbstractPluginInstalled", () => {
  beforeAll(() => {
    globalProcess = global.process;
    globalPROSketchBootstrap = global.PROSketchBootstrap;
  });
  afterAll(() => {
    global.process = globalProcess;
    global.PROSketchBootstrap = globalPROSketchBootstrap;
  });
  test("detects Abstract plugin", () => {
    global.process = {
      type: "sketch"
    };
    global.PROSketchBootstrap = {};
    expect(sketch.isAbstractPluginInstalled()).toBe(true);
  });
});
describe("isAbstractDocument", () => {
  beforeAll(() => {
    globalProcess = global.process;
    globalPROSketchBootstrap = global.PROSketchBootstrap;
  });
  afterAll(() => {
    global.process = globalProcess;
    global.PROSketchBootstrap = globalPROSketchBootstrap;
  });
  test("detects Abstract document", () => {
    global.process = {
      type: "sketch"
    };
    global.PROSketchBootstrap = {
      documentKey: () => "foo"
    };
    expect(sketch.isAbstractDocument({
      document: {}
    })).toBe(true);
  });
});
describe("entities", () => {
  beforeAll(() => {
    globalPROSketchBootstrap = global.PROSketchBootstrap;
  });
  afterAll(() => {
    global.PROSketchBootstrap = globalPROSketchBootstrap;
  });
  test("project", () => {
    global.PROSketchBootstrap = {
      documentKey: () => "project-id/branch-id/foo/file-id"
    };
    expect(sketch.project({})).toEqual({
      projectId: "project-id"
    });
  });
  test("branch", () => {
    global.PROSketchBootstrap = {
      documentKey: () => "project-id/branch-id/foo/file-id"
    };
    expect(sketch.branch({})).toEqual({
      projectId: "project-id",
      branchId: "branch-id"
    });
  });
  test("file", () => {
    global.PROSketchBootstrap = {
      documentKey: () => "project-id/branch-id/foo/file-id"
    };
    expect(sketch.file({})).toEqual({
      projectId: "project-id",
      branchId: "branch-id",
      fileId: "file-id",
      sha: "latest"
    });
  });
});