"use strict";

require("core-js/modules/es7.symbol.async-iterator");

var _testing = require("./testing");

var _ = require(".");

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

test("supports async iteration", async () => {
  for (let i = 0; i < 3; i++) {
    (0, _testing.mockAPI)(`/activities?${i > 0 ? `offset=${i}&` : ""}organizationId=org-id`, {
      data: {
        activities: [{
          id: `activity-id-${i}`
        }]
      },
      meta: {
        limit: 1,
        nextOffset: i === 2 ? undefined : i + 1,
        offset: i,
        total: 3
      }
    });
  }

  const iterable = (0, _.paginate)(_testing.API_CLIENT.activities.list({
    organizationId: "org-id"
  }));
  let i = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(iterable), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const page = _value;
      expect(page[0].id).toEqual(`activity-id-${i++}`);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});