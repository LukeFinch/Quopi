"use strict";

var _testing = require("../testing");

describe("#create", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/projects/project-id/branches/branch-id", {
      name: "branch"
    });
    (0, _testing.mockAPI)("/comments", {
      id: "comment-id"
    }, 201, "post");
    const response = await _testing.API_CLIENT.comments.create({
      projectId: "project-id",
      branchId: "branch-id",
      sha: "sha"
    }, {
      body: "foo"
    });
    expect(response).toEqual({
      id: "comment-id"
    });
  });
  test("api - branch", async () => {
    (0, _testing.mockAPI)("/projects/project-id/branches/branch-id", {
      name: "branch"
    });
    (0, _testing.mockAPI)("/comments", {
      id: "comment-id"
    }, 201, "post");
    const response = await _testing.API_CLIENT.comments.create({
      projectId: "project-id",
      branchId: "branch-id"
    }, {
      body: "foo"
    });
    expect(response).toEqual({
      id: "comment-id"
    });
  });
});
describe("#info", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/comments/comment-id", {
      id: "comment-id"
    });
    const response = await _testing.API_CLIENT.comments.info({
      commentId: "comment-id"
    });
    expect(response).toEqual({
      id: "comment-id"
    });
  });
});
describe("#list", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/comments?branchId=branch-id&projectId=project-id&sha=sha", {
      data: [{
        id: "comment-id"
      }]
    });
    const response = await _testing.API_CLIENT.comments.list({
      projectId: "project-id",
      branchId: "branch-id",
      sha: "sha"
    });
    expect(response).toEqual([{
      id: "comment-id"
    }]);
  });
});