"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _queryString = _interopRequireDefault(require("query-string"));

var _Cursor = _interopRequireDefault(require("../Cursor"));

var _Endpoint = _interopRequireDefault(require("./Endpoint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Comments extends _Endpoint.default {
  async create(descriptor, comment) {
    if (descriptor.sha) {
      descriptor = await this.client.descriptors.getLatestDescriptor(descriptor);
    }

    return this.request({
      api: async () => {
        const body = _objectSpread({}, comment, descriptor, {
          commitSha: descriptor.sha || undefined
        });

        return this.apiRequest("comments", {
          method: "POST",
          body
        });
      }
    });
  }

  info(descriptor) {
    return this.request({
      api: () => {
        return this.apiRequest(`comments/${descriptor.commentId}`);
      },
      cache: {
        key: `comment:${descriptor.commentId}`
      }
    });
  }

  list(descriptor, options = {}) {
    let newDescriptor;
    return this.request({
      api: () => {
        return new _Cursor.default(async (meta = {
          nextOffset: options.offset
        }) => {
          /* istanbul ignore else */
          if (!newDescriptor) {
            newDescriptor = descriptor;
            /* istanbul ignore else */

            if (newDescriptor.sha) {
              newDescriptor = await this.client.descriptors.getLatestDescriptor(newDescriptor);
            }
          }

          const query = _queryString.default.stringify(_objectSpread({}, newDescriptor, options, {
            offset: meta.nextOffset
          }));

          return this.apiRequest(`comments?${query}`);
        });
      }
    });
  }

}

exports.default = Comments;