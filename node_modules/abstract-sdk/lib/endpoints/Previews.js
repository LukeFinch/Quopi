"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = require("fs");

var _errors = require("../errors");

var _utils = require("../utils");

var _Endpoint = _interopRequireDefault(require("./Endpoint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global Blob */
class Previews extends _Endpoint.default {
  async info(descriptor) {
    const latestDescriptor = await this.client.descriptors.getLatestDescriptor(descriptor);
    return this.request({
      api: async () => ({
        webUrl: `${await this.webUrl}/projects/${latestDescriptor.projectId}/commits/${latestDescriptor.sha}/files/${latestDescriptor.fileId}/layers/${latestDescriptor.layerId}`
      })
    });
  }

  async raw(descriptor, options = {}) {
    const latestDescriptor = await this.client.descriptors.getLatestDescriptor(descriptor);
    return this.request({
      api: async () => {
        const arrayBuffer = await this.apiRawRequest(`projects/${latestDescriptor.projectId}/commits/${latestDescriptor.sha}/files/${latestDescriptor.fileId}/layers/${latestDescriptor.layerId}`, {
          headers: {
            Accept: undefined,
            "Content-Type": undefined,
            "Abstract-Api-Version": undefined
          }
        }, (await this.previewsUrl));
        /* istanbul ignore if */

        if ((0, _utils.isNodeEnvironment)() && !options.disableWrite) {
          const filename = options.filename || `${latestDescriptor.layerId}.png`;

          _fs.promises.writeFile(filename, Buffer.from(arrayBuffer));
        }

        return arrayBuffer;
      },
      cache: {
        key: `preview-raw:${descriptor.layerId}`,
        disable: descriptor.sha === "latest"
      }
    });
  }

  async url(descriptor) {
    if (typeof Blob === "undefined") {
      throw new _errors.FileAPIError();
    }

    const buffer = await this.raw(descriptor);
    return URL.createObjectURL(new Blob([new DataView(buffer)], {
      type: "image/png"
    }));
  }

}

exports.default = Previews;