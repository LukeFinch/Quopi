"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _queryString = _interopRequireDefault(require("query-string"));

var _Endpoint = _interopRequireDefault(require("./Endpoint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Layers extends _Endpoint.default {
  async info(descriptor) {
    const latestDescriptor = await this.client.descriptors.getLatestDescriptor(descriptor);
    return this.request({
      api: async () => {
        const response = await this.apiRequest(`projects/${latestDescriptor.projectId}/branches/${latestDescriptor.branchId}/commits/${latestDescriptor.sha}/files/${latestDescriptor.fileId}/layers/${latestDescriptor.layerId}`);
        return _objectSpread({}, response.layer, {
          _file: response.file,
          _page: response.page
        });
      },
      cli: async () => {
        const response = await this.cliRequest(["layer", "meta", latestDescriptor.projectId, latestDescriptor.sha, latestDescriptor.fileId, latestDescriptor.layerId]);
        return response.layer;
      },
      cache: {
        key: `layer:${descriptor.layerId}`,
        disable: descriptor.sha === "latest"
      }
    });
  }

  async list(descriptor, options = {}) {
    descriptor = await this.client.descriptors.getLatestDescriptor(descriptor);
    return this.request({
      api: async () => {
        const query = _queryString.default.stringify(_objectSpread({}, options, descriptor));

        const response = await this.apiRequest(`projects/${descriptor.projectId}/branches/${descriptor.branchId}/files/${descriptor.fileId}/layers?${query}`);
        return response.layers;
      },
      cli: async () => {
        const response = await this.cliRequest(["layers", descriptor.projectId, descriptor.sha, descriptor.fileId]);
        return response.layers;
      }
    });
  }

}

exports.default = Layers;