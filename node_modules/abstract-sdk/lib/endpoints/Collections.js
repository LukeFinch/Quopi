"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _queryString = _interopRequireDefault(require("query-string"));

var _Endpoint = _interopRequireDefault(require("./Endpoint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Collections extends _Endpoint.default {
  create(descriptor, collection) {
    return this.request({
      api: async () => {
        const response = await this.apiRequest(`projects/${descriptor.projectId}/collections`, {
          method: "POST",
          body: collection
        });
        return response.data;
      }
    });
  }

  info(descriptor, options = {
    layersPerCollection: "all"
  }) {
    return this.request({
      api: async () => {
        const query = _queryString.default.stringify(_objectSpread({}, options));

        const response = await this.apiRequest(`projects/${descriptor.projectId}/collections/${descriptor.collectionId}?${query}`);

        const _response$data = response.data,
              {
          collections
        } = _response$data,
              meta = _objectWithoutProperties(_response$data, ["collections"]);

        return _objectSpread({
          collection: collections[0]
        }, meta);
      },
      cli: () => {
        return this.cliRequest(["collection", "load", descriptor.projectId, descriptor.collectionId]);
      },
      cache: {
        key: `collection:${descriptor.collectionId}`
      }
    });
  }

  list(descriptor, options = {}) {
    return this.request({
      api: async () => {
        const {
          projectId
        } = descriptor,
              sanitizedDescriptor = _objectWithoutProperties(descriptor, ["projectId"]);

        const query = _queryString.default.stringify(_objectSpread({}, sanitizedDescriptor, options));

        const response = await this.apiRequest(`projects/${projectId}/collections?${query}`);
        return response.data;
      },
      cli: () => {
        return this.cliRequest(["collections", descriptor.projectId, ...(descriptor.branchId ? ["--branch", descriptor.branchId] : [])]);
      }
    });
  }

  update(descriptor, collection) {
    return this.request({
      api: async () => {
        const response = await this.apiRequest(`projects/${descriptor.projectId}/collections/${descriptor.collectionId}`, {
          method: "PUT",
          body: collection
        });
        return response.data;
      }
    });
  }

}

exports.default = Collections;