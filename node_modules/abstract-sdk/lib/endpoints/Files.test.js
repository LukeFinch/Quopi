"use strict";

var _testing = require("../testing");

var _errors = require("../errors");

describe("#info", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/projects/project-id/branches/branch-id/files", {
      files: [{
        id: "file-id"
      }]
    });
    const response = await _testing.API_CLIENT.files.info({
      branchId: "branch-id",
      fileId: "file-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toEqual({
      id: "file-id"
    });
  });
  test("api - not found", async () => {
    (0, _testing.mockAPI)("/projects/project-id/branches/branch-id/files", {
      files: [{
        id: "not-found"
      }]
    });

    try {
      await _testing.API_CLIENT.files.info({
        branchId: "branch-id",
        fileId: "file-id",
        projectId: "project-id",
        sha: "sha"
      });
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.NotFoundError);
    }
  });
  test("cli", async () => {
    (0, _testing.mockCLI)(["file", "project-id", "sha", "file-id"], {
      file: {
        id: "file-id"
      }
    });
    const response = await _testing.CLI_CLIENT.files.info({
      branchId: "branch-id",
      fileId: "file-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toEqual({
      id: "file-id"
    });
  });
});
describe("#list", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/projects/project-id/branches/branch-id/files", {
      files: [{
        id: "file-id"
      }]
    });
    const response = await _testing.API_CLIENT.files.list({
      branchId: "branch-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toEqual([{
      id: "file-id"
    }]);
  });
  test("cli", async () => {
    (0, _testing.mockCLI)(["files", "project-id", "sha"], {
      files: [{
        id: "file-id"
      }]
    });
    const response = await _testing.CLI_CLIENT.files.list({
      branchId: "branch-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toEqual([{
      id: "file-id"
    }]);
  });
});
let globalProcess;
describe("#raw", () => {
  beforeAll(() => {
    globalProcess = global.process;
  });
  afterAll(() => {
    global.process = globalProcess;
  });
  test("cli", async () => {
    (0, _testing.mockCLI)(["file", "export", "file-id", "filename", "--project-id=project-id", "--branch-id=branch-id", "--sha=sha"], {
      file: {
        id: "file-id"
      }
    });
    await _testing.CLI_CLIENT.files.raw({
      branchId: "branch-id",
      fileId: "file-id",
      projectId: "project-id",
      sha: "sha"
    }, {
      filename: "filename"
    });
  });
  test("cli - uses cwd", async () => {
    (0, _testing.mockCLI)(["file", "export", "file-id", "cwd", "--project-id=project-id", "--branch-id=branch-id", "--sha=sha"], {
      file: {
        id: "file-id"
      }
    });

    process.cwd = () => "cwd";

    await _testing.CLI_CLIENT.files.raw({
      branchId: "branch-id",
      fileId: "file-id",
      projectId: "project-id",
      sha: "sha"
    });
  });
});