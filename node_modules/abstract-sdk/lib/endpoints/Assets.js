"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = require("fs");

var _queryString = _interopRequireDefault(require("query-string"));

var _utils = require("../utils");

var _Endpoint = _interopRequireDefault(require("./Endpoint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Assets extends _Endpoint.default {
  info(descriptor) {
    return this.request({
      api: async () => {
        return this.apiRequest(`projects/${descriptor.projectId}/assets/${descriptor.assetId}`);
      },
      cache: {
        key: `asset:${descriptor.assetId}`
      }
    });
  }

  async list(descriptor) {
    const latestDescriptor = await this.client.descriptors.getLatestDescriptor(descriptor);
    return this.request({
      api: async () => {
        const query = _queryString.default.stringify({
          sha: latestDescriptor.sha
        });

        const response = await this.apiRequest(`projects/${latestDescriptor.projectId}/assets?${query}`);
        return response.data.assets;
      }
    });
  }

  raw(descriptor, options = {}) {
    return this.request({
      api: async () => {
        const asset = await this.info(descriptor);
        const arrayBuffer = await this.apiRawRequest(asset.url, {
          headers: {
            Accept: undefined,
            "Content-Type": undefined,
            "Abstract-Api-Version": undefined
          }
        }, null);
        /* istanbul ignore if */

        if ((0, _utils.isNodeEnvironment)() && !options.disableWrite) {
          const filename = options.filename || `${asset.layerName}.${asset.fileFormat}`;

          _fs.promises.writeFile(filename, Buffer.from(arrayBuffer));
        }

        return arrayBuffer;
      },
      cache: {
        key: `asset-raw:${descriptor.assetId}`
      }
    });
  }

}

exports.default = Assets;