"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("cross-fetch/polyfill");

var _fs = require("fs");

var _child_process = require("child_process");

var _v = _interopRequireDefault(require("uuid/v4"));

var _Client = _interopRequireDefault(require("../Client"));

var _utils = require("../utils");

var _debug = require("../debug");

var _package = require("../../package.json");

var _errors = require("../errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const logAPIRequest = _debug.log.extend("AbstractAPI:request");

const logAPIResponse = _debug.log.extend("AbstractAPI:response");

const logCLIRequest = _debug.log.extend("AbstractCLI:request");

const logCLIResponse = _debug.log.extend("AbstractCLI:response");

const minorVersion = _package.version.split(".", 2).join(".");

class Endpoint {
  constructor(client, options) {
    _defineProperty(this, "_optionAccessToken", void 0);

    _defineProperty(this, "apiUrl", void 0);

    _defineProperty(this, "cliPath", void 0);

    _defineProperty(this, "client", void 0);

    _defineProperty(this, "lastCalledEndpoint", void 0);

    _defineProperty(this, "maxCacheSize", void 0);

    _defineProperty(this, "previewsUrl", void 0);

    _defineProperty(this, "transportMode", void 0);

    _defineProperty(this, "webUrl", void 0);

    _defineProperty(this, "accessToken", async () => typeof this._optionAccessToken === "function" ? this._optionAccessToken() : this._optionAccessToken);

    this._optionAccessToken = options.accessToken;
    this.apiUrl = options.apiUrl;
    this.cliPath = options.cliPath;
    this.client = client;
    this.maxCacheSize = options.maxCacheSize;
    this.previewsUrl = options.previewsUrl;
    this.transportMode = options.transportMode;
    this.webUrl = options.webUrl;
  }

  request(request) {
    let response;

    if (request.cache) {
      const existingEntity = this.client.cache.get(request.cache.key);

      if (existingEntity) {
        return existingEntity;
      }
    }

    if (this.transportMode === "auto") {
      if (request.cli) {
        response = request.cli();
      } else if (request.api) {
        response = request.api();
      } else {
        throw new _errors.EndpointUndefinedError(this.lastCalledEndpoint, this.transportMode);
      }
    } else if (request[this.transportMode]) {
      const handler = request[this.transportMode];
      response = handler();
    } else {
      throw new _errors.EndpointUndefinedError(this.lastCalledEndpoint, this.transportMode);
    }

    if (request.cache && this.maxCacheSize > 0 && !request.cache.disable) {
      this.client.cache.set(request.cache.key, response);

      if (this.client.cache.size > this.maxCacheSize) {
        const oldestEntity = this.client.cache.keys().next().value;
        oldestEntity && this.client.cache.delete(oldestEntity);
      }
    }

    return response;
  }

  async apiRequest(input, init = {}, overrideHostname) {
    const hostname = overrideHostname !== undefined ? overrideHostname : await this.apiUrl;
    const response = await this._fetch(input, init, hostname);
    const data = await response.json();
    /* istanbul ignore next */

    logAPIResponse.enabled && logAPIResponse(data);
    return data;
  }

  async apiRawRequest(input, init = {}, overrideHostname) {
    const hostname = overrideHostname !== undefined ? overrideHostname : await this.apiUrl;
    const response = await this._fetch(input, init, hostname);
    const buffer = response.arrayBuffer();
    /* istanbul ignore next */

    logAPIResponse.enabled && logAPIResponse(buffer.toString());
    return buffer;
  }

  async cliRequest(args) {
    const token = await this.accessToken();
    const cliPath = await this.cliPath;
    const tokenArgs = typeof token === "string" ? ["--user-token", token] : [];

    if (!cliPath || !(0, _fs.existsSync)(cliPath)) {
      const error = new _errors.CLIPathError();
      /* istanbul ignore next */

      _errors.logCLIError.enabled && (0, _errors.logCLIError)(error);
      throw error;
    }

    const spawnArgs = [cliPath, [...tokenArgs, "--api-url", await this.apiUrl, ...args]];
    /* istanbul ignore next */

    logCLIRequest.enabled && logCLIRequest(spawnArgs);
    const request = (0, _child_process.spawn)(...spawnArgs);
    return new Promise((resolve, reject) => {
      let errBuffer = Buffer.from("");
      let outBuffer = Buffer.from("");
      request.stderr.on("data", chunk => {
        errBuffer = Buffer.concat([errBuffer, chunk]);
      });
      request.stdout.on("data", chunk => {
        outBuffer = Buffer.concat([outBuffer, chunk]);
      });
      request.on("error", reject);
      request.on("close", errCode => {
        if (errCode !== 0) {
          const response = JSON.parse(errBuffer.toString());

          try {
            (0, _errors.throwCLIError)(response, spawnArgs[0], _objectSpread({}, spawnArgs[1]));
          } catch (error) {
            reject(error);
          }

          return;
        }

        const response = JSON.parse(outBuffer.toString());
        /* istanbul ignore next */

        logCLIResponse.enabled && logCLIResponse(response);
        resolve(response);
      });
    });
  }

  async _fetch(input, init = {}, hostname) {
    if (init.body) {
      init.body = JSON.stringify(init.body);
    }

    init.headers = await this._getAPIHeaders(init.headers);
    const args = [hostname === null ? input : `${hostname || ""}/${input}`, init];
    /* istanbul ignore next */

    logAPIRequest.enabled && logAPIRequest(args);
    const request = fetch(...args);
    const response = await request;
    !response.ok && (await (0, _errors.throwAPIError)(response, input, init.body));
    return response;
  }

  async _getAPIHeaders(headers) {
    let tokenHeader = {};
    const token = await this.accessToken();

    if (!token) {
      const error = new _errors.APITokenError();
      /* istanbul ignore next */

      _errors.logAPIError.enabled && (0, _errors.logAPIError)(error);
      throw error;
    }

    if (token) {
      tokenHeader = typeof token === "string" ? {
        Authorization: `Bearer ${token}`
      } : {
        "Abstract-Share-Id": (0, _utils.inferShareId)(token)
      };
    }

    const tokens = _objectSpread({
      Accept: "application/json",
      "Content-Type": "application/json",
      "User-Agent": `Abstract SDK ${minorVersion}`,
      "X-Amzn-Trace-Id": `Root=1-${new Date().getTime()}-${(0, _v.default)()}`,
      "Abstract-Api-Version": "8"
    }, tokenHeader, headers);

    Object.keys(tokens).forEach(key => {
      tokens[key] === undefined && delete tokens[key];
    });
    return tokens;
  }

}

exports.default = Endpoint;