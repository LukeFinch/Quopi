"use strict";

var _testing = require("../testing");

var _errors = require("../errors");

describe("#info", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/projects/project-id/branches/branch-id/files/file-id/pages", {
      pages: [{
        id: "page-id"
      }]
    });
    const response = await _testing.API_CLIENT.pages.info({
      branchId: "branch-id",
      fileId: "file-id",
      pageId: "page-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toEqual({
      id: "page-id"
    });
  });
  test("api - not found", async () => {
    (0, _testing.mockAPI)("/projects/project-id/branches/branch-id/files/file-id/pages", {
      pages: [{
        id: "not-found"
      }]
    });

    try {
      await _testing.API_CLIENT.pages.info({
        branchId: "branch-id",
        fileId: "file-id",
        pageId: "page-id",
        projectId: "project-id",
        sha: "sha"
      });
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.NotFoundError);
    }
  });
  test("cli", async () => {
    (0, _testing.mockCLI)(["files", "project-id", "sha"], {
      pages: [{
        id: "page-id"
      }]
    });
    const response = await _testing.CLI_CLIENT.pages.info({
      branchId: "branch-id",
      fileId: "file-id",
      pageId: "page-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toEqual({
      id: "page-id"
    });
  });
  test("cli - not found", async () => {
    (0, _testing.mockCLI)(["files", "project-id", "sha"], {
      pages: [{
        id: "not-found"
      }]
    });

    try {
      await _testing.CLI_CLIENT.pages.info({
        branchId: "branch-id",
        fileId: "file-id",
        pageId: "page-id",
        projectId: "project-id",
        sha: "sha"
      });
    } catch (error) {
      expect(error).toBeInstanceOf(_errors.NotFoundError);
    }
  });
});
describe("#list", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/projects/project-id/branches/branch-id/files/file-id/pages", {
      pages: [{
        id: "page-id"
      }]
    });
    const response = await _testing.API_CLIENT.pages.list({
      branchId: "branch-id",
      fileId: "file-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toEqual([{
      id: "page-id"
    }]);
  });
  test("cli", async () => {
    (0, _testing.mockCLI)(["files", "project-id", "sha"], {
      pages: [{
        id: "page-id"
      }]
    });
    const response = await _testing.CLI_CLIENT.pages.list({
      branchId: "branch-id",
      fileId: "file-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toEqual([{
      id: "page-id"
    }]);
  });
});