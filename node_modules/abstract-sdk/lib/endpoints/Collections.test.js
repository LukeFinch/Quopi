"use strict";

var _testing = require("../testing");

describe("#create", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/projects/project-id/collections", {
      data: {
        id: "collection-id"
      }
    }, 201, "post");
    const response = await _testing.API_CLIENT.collections.create({
      projectId: "project-id"
    }, {
      branchId: "branch",
      name: "collection"
    });
    expect(response).toEqual({
      id: "collection-id"
    });
  });
});
describe("#info", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/projects/project-id/collections/collection-id?layersPerCollection=all", {
      data: {
        collections: [{
          id: "collection-id"
        }]
      }
    });
    const response = await _testing.API_CLIENT.collections.info({
      collectionId: "collection-id",
      projectId: "project-id"
    });
    expect(response).toEqual({
      collection: {
        id: "collection-id"
      }
    });
  });
  test("cli", async () => {
    (0, _testing.mockCLI)(["collection", "load", "project-id", "collection-id"], {
      collection: {
        id: "collection-id"
      }
    });
    const response = await _testing.CLI_CLIENT.collections.info({
      projectId: "project-id",
      collectionId: "collection-id"
    });
    expect(response).toEqual({
      collection: {
        id: "collection-id"
      }
    });
  });
});
describe("#list", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/projects/project-id/collections?branchId=branch-id", {
      data: {
        collections: [{
          id: "collection-id"
        }]
      }
    });
    const response = await _testing.API_CLIENT.collections.list({
      projectId: "project-id",
      branchId: "branch-id"
    });
    expect(response).toEqual({
      collections: [{
        id: "collection-id"
      }]
    });
  });
  test("cli", async () => {
    (0, _testing.mockCLI)(["collections", "project-id", "--branch", "branch-id"], {
      collections: [{
        id: "collection-id"
      }]
    });
    const response = await _testing.CLI_CLIENT.collections.list({
      projectId: "project-id",
      branchId: "branch-id"
    });
    expect(response).toEqual({
      collections: [{
        id: "collection-id"
      }]
    });
  });
  test("cli - no branch id", async () => {
    (0, _testing.mockCLI)(["collections", "project-id"], {
      collections: [{
        id: "collection-id"
      }]
    });
    const response = await _testing.CLI_CLIENT.collections.list({
      projectId: "project-id"
    });
    expect(response).toEqual({
      collections: [{
        id: "collection-id"
      }]
    });
  });
});
describe("#update", () => {
  test("api", async () => {
    (0, _testing.mockAPI)("/projects/project-id/collections/collection-id", {
      data: {
        id: "collection-id"
      }
    }, 204, "put");
    const response = await _testing.API_CLIENT.collections.update({
      collectionId: "collection-id",
      projectId: "project-id"
    }, {
      branchId: "branch",
      name: "collection"
    });
    expect(response).toEqual({
      id: "collection-id"
    });
  });
});