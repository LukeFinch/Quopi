"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _queryString = _interopRequireDefault(require("query-string"));

var _Endpoint = _interopRequireDefault(require("./Endpoint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Commits extends _Endpoint.default {
  info(descriptor) {
    return this.request({
      api: () => {
        return this.apiRequest(`projects/${descriptor.projectId}/branches/${descriptor.branchId}/commits/${descriptor.sha}`);
      },
      cli: async () => {
        const response = await this.cliRequest(["commit", descriptor.projectId, descriptor.sha]);
        return response.commit;
      },
      cache: {
        key: `commit:${descriptor.sha}`
      }
    });
  }

  list(descriptor, options = {}) {
    return this.request({
      api: async () => {
        const query = _queryString.default.stringify(_objectSpread({}, options, {
          fileId: descriptor.fileId && descriptor.fileId,
          layerId: descriptor.layerId && descriptor.layerId
        }));

        const response = await this.apiRequest(`projects/${descriptor.projectId}/branches/${descriptor.branchId}/commits?${query}`);
        return response.commits;
      },
      cli: async () => {
        const response = await this.cliRequest(["commits", descriptor.projectId, descriptor.branchId, ...(descriptor.fileId ? ["--file-id", descriptor.fileId] : []), ...(descriptor.layerId ? ["--layer-id", descriptor.layerId] : []), ...(options.limit ? ["--limit", options.limit.toString()] : [])]);
        return response.commits;
      }
    });
  }

}

exports.default = Commits;