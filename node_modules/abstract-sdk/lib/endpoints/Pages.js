"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _errors = require("../errors");

var _Endpoint = _interopRequireDefault(require("./Endpoint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

class Pages extends _Endpoint.default {
  async info(descriptor) {
    const latestDescriptor = await this.client.descriptors.getLatestDescriptor(descriptor);
    return this.request({
      api: async () => {
        const {
          pageId
        } = latestDescriptor,
              fileDescriptor = _objectWithoutProperties(latestDescriptor, ["pageId"]);

        const pages = await this.list(fileDescriptor);
        const page = pages.find(page => page.id === pageId);

        if (!page) {
          throw new _errors.NotFoundError(`pageId=${pageId}`);
        }

        return page;
      },
      cli: async () => {
        const {
          pageId
        } = latestDescriptor,
              fileDescriptor = _objectWithoutProperties(latestDescriptor, ["pageId"]);

        const pages = await this.list(fileDescriptor);
        const page = pages.find(page => page.id === pageId);

        if (!page) {
          throw new _errors.NotFoundError(`pageId=${pageId}`);
        }

        return page;
      },
      cache: {
        key: `page:${descriptor.pageId}`
      }
    });
  }

  async list(descriptor) {
    const latestDescriptor = await this.client.descriptors.getLatestDescriptor(descriptor);
    return this.request({
      api: async () => {
        const response = await this.apiRequest(`projects/${latestDescriptor.projectId}/branches/${latestDescriptor.branchId}/files/${latestDescriptor.fileId}/pages`);
        return response.pages;
      },
      cli: async () => {
        const response = await this.cliRequest(["files", latestDescriptor.projectId, latestDescriptor.sha]);
        return response.pages;
      }
    });
  }

}

exports.default = Pages;