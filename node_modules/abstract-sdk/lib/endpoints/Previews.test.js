"use strict";

var _testing = require("../testing");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe("#info", () => {
  test("api", async () => {
    const response = await _testing.API_CLIENT.previews.info({
      branchId: "branch-id",
      fileId: "file-id",
      layerId: "layer-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toEqual({
      webUrl: "https://app.goabstract.com/projects/project-id/commits/sha/files/file-id/layers/layer-id"
    });
  });
});
let globalProcess;
describe("#raw", () => {
  beforeAll(() => {
    globalProcess = global.process;
  });
  afterAll(() => {
    global.process = globalProcess;
  });
  test("api", async () => {
    (0, _testing.mockPreviewAPI)("/projects/project-id/commits/sha/files/file-id/layers/layer-id", {});
    const response = await _testing.API_CLIENT.previews.raw({
      branchId: "branch-id",
      fileId: "file-id",
      layerId: "layer-id",
      projectId: "project-id",
      sha: "sha"
    }, {
      disableWrite: true
    });
    expect(response).toBeInstanceOf(ArrayBuffer);
  });
  test("api - browser", async () => {
    (0, _testing.mockPreviewAPI)("/projects/project-id/commits/sha/files/file-id/layers/layer-id", {});
    global.process = _objectSpread({}, global.process, {
      versions: undefined
    });
    const response = await _testing.API_CLIENT.previews.raw({
      branchId: "branch-id",
      fileId: "file-id",
      layerId: "layer-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toBeInstanceOf(ArrayBuffer);
  });
});
describe("#url", () => {
  beforeAll(() => {
    globalProcess = global.process;
  });
  afterAll(() => {
    global.process = globalProcess;
  });
  test("api - browser", async () => {
    (0, _testing.mockPreviewAPI)("/projects/project-id/commits/sha/files/file-id/layers/layer-id", {});
    global.process = _objectSpread({}, global.process, {
      versions: undefined
    });
    global.URL = {
      createObjectURL: blob => blob
    };
    const response = await _testing.API_CLIENT.previews.url({
      branchId: "branch-id",
      fileId: "file-id",
      layerId: "layer-id",
      projectId: "project-id",
      sha: "sha"
    });
    expect(response).toBeInstanceOf(Blob);
  });
});